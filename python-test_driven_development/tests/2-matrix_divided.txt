# Tests pour la fonction matrix_divided

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Cas normaux :
>>> matrix_divided([[1, 2], [3, 4]], 2)
[[0.5, 1.0], [1.5, 2.0]]

>>> matrix_divided([[2, 4], [6, 8]], 2)
[[1.0, 2.0], [3.0, 4.0]]

>>> matrix_divided([[1.5, 2.5], [3.5, 4.5]], 2)
[[0.75, 1.25], [1.75, 2.25]]

# Cas où la division donne des arrondis :
>>> matrix_divided([[10, 20], [30, 40]], 3)
[[3.33, 6.67], [10.0, 13.33]]

# Cas avec un seul élément dans chaque ligne :
>>> matrix_divided([[1], [2], [3]], 2)
[[0.5], [1.0], [1.5]]

# Cas avec div négatif :
>>> matrix_divided([[1, 2], [3, 4]], -2)
[[-0.5, -1.0], [-1.5, -2.0]]

# Cas d'erreurs (type incorrect pour matrix) :
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2], "not a list"], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2], [3, "not a number"]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Cas d'erreurs (dimensions des lignes non uniformes) :
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Cas d'erreurs (type incorrect pour div) :
>>> matrix_divided([[1, 2], [3, 4]], "not a number")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Cas d'erreur (division par zéro) :
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero
